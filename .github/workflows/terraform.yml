
# on:
#   push:
#     branches:
#     - main

# jobs:
#   terraform:
#     name: 'Terraform-Plan'
#     runs-on: ubuntu-latest
#     env:
#       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCES_KEY }}
#       AWS_REGION: 'us-east-1'

#     # # Use the Bash shell regardless whether the GitHubActions runner is ubuntu-latest, macos-latest, or windows-latest
#     # defaults:
#     #   run:
#     #     shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v2

#       # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#       - name: Terraform Init
#         run: terraform init

#       # # Checks that all Terraform configuration files adhere to a canonical format
#       # - name: Terraform Format
#       #   run: terraform fmt -check

#       # Generates an execution plan for Terraformdfdg
#       - name: Terraform Plan
#         run: terraform plan

#       # # # On push to main, build or change infrastructure according to Terraform configuration files
#       # # # Note: It is recommendeds to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#       - name: Terraform Destroy
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform destroy -auto-approve
